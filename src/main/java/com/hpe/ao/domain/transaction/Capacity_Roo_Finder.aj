// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.hpe.ao.domain.transaction;

import com.hpe.ao.domain.transaction.Capacity;
import com.hpe.ao.domain.transaction.Project;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Capacity_Roo_Finder {
    
    public static Long Capacity.countFindCapacitysByEffectiveDateEquals(Date effectiveDate) {
        if (effectiveDate == null) throw new IllegalArgumentException("The effectiveDate argument is required");
        EntityManager em = Capacity.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Capacity AS o WHERE o.effectiveDate = :effectiveDate", Long.class);
        q.setParameter("effectiveDate", effectiveDate);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Capacity.countFindCapacitysByProject(Project project) {
        if (project == null) throw new IllegalArgumentException("The project argument is required");
        EntityManager em = Capacity.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Capacity AS o WHERE o.project = :project", Long.class);
        q.setParameter("project", project);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Capacity> Capacity.findCapacitysByEffectiveDateEquals(Date effectiveDate) {
        if (effectiveDate == null) throw new IllegalArgumentException("The effectiveDate argument is required");
        EntityManager em = Capacity.entityManager();
        TypedQuery<Capacity> q = em.createQuery("SELECT o FROM Capacity AS o WHERE o.effectiveDate = :effectiveDate", Capacity.class);
        q.setParameter("effectiveDate", effectiveDate);
        return q;
    }
    
    public static TypedQuery<Capacity> Capacity.findCapacitysByEffectiveDateEquals(Date effectiveDate, String sortFieldName, String sortOrder) {
        if (effectiveDate == null) throw new IllegalArgumentException("The effectiveDate argument is required");
        EntityManager em = Capacity.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Capacity AS o WHERE o.effectiveDate = :effectiveDate");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Capacity> q = em.createQuery(queryBuilder.toString(), Capacity.class);
        q.setParameter("effectiveDate", effectiveDate);
        return q;
    }
    
    public static TypedQuery<Capacity> Capacity.findCapacitysByProject(Project project) {
        if (project == null) throw new IllegalArgumentException("The project argument is required");
        EntityManager em = Capacity.entityManager();
        TypedQuery<Capacity> q = em.createQuery("SELECT o FROM Capacity AS o WHERE o.project = :project", Capacity.class);
        q.setParameter("project", project);
        return q;
    }
    
    public static TypedQuery<Capacity> Capacity.findCapacitysByProject(Project project, String sortFieldName, String sortOrder) {
        if (project == null) throw new IllegalArgumentException("The project argument is required");
        EntityManager em = Capacity.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Capacity AS o WHERE o.project = :project");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Capacity> q = em.createQuery(queryBuilder.toString(), Capacity.class);
        q.setParameter("project", project);
        return q;
    }
    
}
