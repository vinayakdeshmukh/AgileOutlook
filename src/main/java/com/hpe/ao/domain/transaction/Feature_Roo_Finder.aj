// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.hpe.ao.domain.transaction;

import com.hpe.ao.domain.transaction.Feature;
import com.hpe.ao.domain.transaction.ProjectRelease;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Feature_Roo_Finder {
    
    public static Long Feature.countFindFeaturesByProjectRelease(ProjectRelease projectRelease) {
        if (projectRelease == null) throw new IllegalArgumentException("The projectRelease argument is required");
        EntityManager em = Feature.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Feature AS o WHERE o.projectRelease = :projectRelease", Long.class);
        q.setParameter("projectRelease", projectRelease);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Feature> Feature.findFeaturesByProjectRelease(ProjectRelease projectRelease) {
        if (projectRelease == null) throw new IllegalArgumentException("The projectRelease argument is required");
        EntityManager em = Feature.entityManager();
        TypedQuery<Feature> q = em.createQuery("SELECT o FROM Feature AS o WHERE o.projectRelease = :projectRelease", Feature.class);
        q.setParameter("projectRelease", projectRelease);
        return q;
    }
    
    public static TypedQuery<Feature> Feature.findFeaturesByProjectRelease(ProjectRelease projectRelease, String sortFieldName, String sortOrder) {
        if (projectRelease == null) throw new IllegalArgumentException("The projectRelease argument is required");
        EntityManager em = Feature.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Feature AS o WHERE o.projectRelease = :projectRelease");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Feature> q = em.createQuery(queryBuilder.toString(), Feature.class);
        q.setParameter("projectRelease", projectRelease);
        return q;
    }
    
}
