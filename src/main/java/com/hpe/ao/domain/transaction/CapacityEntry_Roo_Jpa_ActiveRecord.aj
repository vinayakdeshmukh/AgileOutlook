// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.hpe.ao.domain.transaction;

import com.hpe.ao.domain.transaction.CapacityEntry;
import java.util.List;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CapacityEntry_Roo_Jpa_ActiveRecord {
    
    public static final List<String> CapacityEntry.fieldNames4OrderClauseFilter = java.util.Arrays.asList("project", "startDate", "endDate", "capacityEntryType", "teamCount", "teamSize", "teamAvailability", "teamAveragePointDaily", "pointCapacity", "factor1", "factor1Description", "factor2", "factor2Description", "factor3", "factor3Description", "entryComments");
    
    public static long CapacityEntry.countCapacityEntrys() {
        return entityManager().createQuery("SELECT COUNT(o) FROM CapacityEntry o", Long.class).getSingleResult();
    }
    
    public static List<CapacityEntry> CapacityEntry.findAllCapacityEntrys() {
        return entityManager().createQuery("SELECT o FROM CapacityEntry o", CapacityEntry.class).getResultList();
    }
    
    public static List<CapacityEntry> CapacityEntry.findAllCapacityEntrys(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM CapacityEntry o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, CapacityEntry.class).getResultList();
    }
    
    public static CapacityEntry CapacityEntry.findCapacityEntry(Long id) {
        if (id == null) return null;
        return entityManager().find(CapacityEntry.class, id);
    }
    
    public static List<CapacityEntry> CapacityEntry.findCapacityEntryEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM CapacityEntry o", CapacityEntry.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<CapacityEntry> CapacityEntry.findCapacityEntryEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM CapacityEntry o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, CapacityEntry.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public CapacityEntry CapacityEntry.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        CapacityEntry merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
