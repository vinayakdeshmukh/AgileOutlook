// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.hpe.ao.web;

import com.hpe.ao.domain.transaction.Application;
import com.hpe.ao.domain.transaction.Feature;
import com.hpe.ao.domain.transaction.ProjectRelease;
import com.hpe.ao.reference.Status;
import com.hpe.ao.service.ApplicationService;
import com.hpe.ao.service.FeatureService;
import com.hpe.ao.service.ProjectReleaseService;
import com.hpe.ao.service.TagService;
import com.hpe.ao.web.FeatureController;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect FeatureController_Roo_Controller {
    
    @Autowired
    ApplicationService FeatureController.applicationService;
    
    @Autowired
    ProjectReleaseService FeatureController.projectReleaseService;
    
    @Autowired
    FeatureService FeatureController.featureService;
    
    @Autowired
    TagService FeatureController.tagService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String FeatureController.create(@Valid Feature feature, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, feature);
            return "features/create";
        }
        uiModel.asMap().clear();
        featureService.saveFeature(feature);
        return "redirect:/features/" + encodeUrlPathSegment(feature.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String FeatureController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Feature());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (applicationService.countAllApplications() == 0) {
            dependencies.add(new String[] { "application", "applications" });
        }
        if (projectReleaseService.countAllProjectReleases() == 0) {
            dependencies.add(new String[] { "projectRelease", "projectreleases" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "features/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String FeatureController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("feature", featureService.findFeature(id));
        uiModel.addAttribute("itemId", id);
        return "features/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String FeatureController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("features", Feature.findFeatureEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) featureService.countAllFeatures() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("features", Feature.findAllFeatures(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "features/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String FeatureController.update(@Valid Feature feature, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, feature);
            return "features/update";
        }
        uiModel.asMap().clear();
        featureService.updateFeature(feature);
        return "redirect:/features/" + encodeUrlPathSegment(feature.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String FeatureController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, featureService.findFeature(id));
        return "features/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String FeatureController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Feature feature = featureService.findFeature(id);
        featureService.deleteFeature(feature);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/features";
    }
    
    void FeatureController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("feature_startdatebaseline_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("feature_enddatebaseline_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("feature_startdateactual_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("feature_enddateactual_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void FeatureController.populateEditForm(Model uiModel, Feature feature) {
        uiModel.addAttribute("feature", feature);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("tags", tagService.findAllTags());
        uiModel.addAttribute("applications", applicationService.findAllApplications());
        uiModel.addAttribute("projectreleases", projectReleaseService.findAllProjectReleases());
        uiModel.addAttribute("statuses", Arrays.asList(Status.values()));
    }
    
    String FeatureController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
