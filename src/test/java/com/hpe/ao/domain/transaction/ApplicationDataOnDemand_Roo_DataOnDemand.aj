// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.hpe.ao.domain.transaction;

import com.hpe.ao.domain.transaction.Application;
import com.hpe.ao.domain.transaction.ApplicationDataOnDemand;
import com.hpe.ao.domain.transaction.Project;
import com.hpe.ao.domain.transaction.ProjectDataOnDemand;
import com.hpe.ao.reference.Status;
import com.hpe.ao.service.ApplicationService;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ApplicationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ApplicationDataOnDemand: @Component;
    
    private Random ApplicationDataOnDemand.rnd = new SecureRandom();
    
    private List<Application> ApplicationDataOnDemand.data;
    
    @Autowired
    ProjectDataOnDemand ApplicationDataOnDemand.projectDataOnDemand;
    
    @Autowired
    ApplicationService ApplicationDataOnDemand.applicationService;
    
    public Application ApplicationDataOnDemand.getNewTransientApplication(int index) {
        Application obj = new Application();
        setDescription(obj, index);
        setEndDateActual(obj, index);
        setEndDateBaseline(obj, index);
        setLeadName(obj, index);
        setName(obj, index);
        setPriority(obj, index);
        setProject(obj, index);
        setStartDateActual(obj, index);
        setStartDateBaseline(obj, index);
        setStatus(obj, index);
        setStoryCountActual(obj, index);
        setStoryCountBaseline(obj, index);
        setStoryPointActual(obj, index);
        setStoryPointBaseline(obj, index);
        return obj;
    }
    
    public void ApplicationDataOnDemand.setDescription(Application obj, int index) {
        String description = "description_" + index;
        if (description.length() > 250) {
            description = description.substring(0, 250);
        }
        obj.setDescription(description);
    }
    
    public void ApplicationDataOnDemand.setEndDateActual(Application obj, int index) {
        Date endDateActual = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setEndDateActual(endDateActual);
    }
    
    public void ApplicationDataOnDemand.setEndDateBaseline(Application obj, int index) {
        Date endDateBaseline = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setEndDateBaseline(endDateBaseline);
    }
    
    public void ApplicationDataOnDemand.setLeadName(Application obj, int index) {
        String leadName = "leadName_" + index;
        if (leadName.length() > 30) {
            leadName = leadName.substring(0, 30);
        }
        obj.setLeadName(leadName);
    }
    
    public void ApplicationDataOnDemand.setName(Application obj, int index) {
        String name = "name_" + index;
        if (name.length() > 30) {
            name = name.substring(0, 30);
        }
        obj.setName(name);
    }
    
    public void ApplicationDataOnDemand.setPriority(Application obj, int index) {
        BigDecimal priority = BigDecimal.valueOf(index);
        obj.setPriority(priority);
    }
    
    public void ApplicationDataOnDemand.setProject(Application obj, int index) {
        Project project = projectDataOnDemand.getRandomProject();
        obj.setProject(project);
    }
    
    public void ApplicationDataOnDemand.setStartDateActual(Application obj, int index) {
        Date startDateActual = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStartDateActual(startDateActual);
    }
    
    public void ApplicationDataOnDemand.setStartDateBaseline(Application obj, int index) {
        Date startDateBaseline = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStartDateBaseline(startDateBaseline);
    }
    
    public void ApplicationDataOnDemand.setStatus(Application obj, int index) {
        Status status = Status.class.getEnumConstants()[0];
        obj.setStatus(status);
    }
    
    public void ApplicationDataOnDemand.setStoryCountActual(Application obj, int index) {
        BigDecimal storyCountActual = BigDecimal.valueOf(index);
        obj.setStoryCountActual(storyCountActual);
    }
    
    public void ApplicationDataOnDemand.setStoryCountBaseline(Application obj, int index) {
        BigDecimal storyCountBaseline = BigDecimal.valueOf(index);
        obj.setStoryCountBaseline(storyCountBaseline);
    }
    
    public void ApplicationDataOnDemand.setStoryPointActual(Application obj, int index) {
        BigDecimal storyPointActual = BigDecimal.valueOf(index);
        obj.setStoryPointActual(storyPointActual);
    }
    
    public void ApplicationDataOnDemand.setStoryPointBaseline(Application obj, int index) {
        BigDecimal storyPointBaseline = BigDecimal.valueOf(index);
        obj.setStoryPointBaseline(storyPointBaseline);
    }
    
    public Application ApplicationDataOnDemand.getSpecificApplication(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Application obj = data.get(index);
        Long id = obj.getId();
        return applicationService.findApplication(id);
    }
    
    public Application ApplicationDataOnDemand.getRandomApplication() {
        init();
        Application obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return applicationService.findApplication(id);
    }
    
    public boolean ApplicationDataOnDemand.modifyApplication(Application obj) {
        return false;
    }
    
    public void ApplicationDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = applicationService.findApplicationEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Application' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Application>();
        for (int i = 0; i < 10; i++) {
            Application obj = getNewTransientApplication(i);
            try {
                applicationService.saveApplication(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
