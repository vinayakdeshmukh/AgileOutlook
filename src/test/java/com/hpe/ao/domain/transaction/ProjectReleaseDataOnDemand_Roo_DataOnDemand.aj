// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.hpe.ao.domain.transaction;

import com.hpe.ao.domain.transaction.Project;
import com.hpe.ao.domain.transaction.ProjectDataOnDemand;
import com.hpe.ao.domain.transaction.ProjectRelease;
import com.hpe.ao.domain.transaction.ProjectReleaseDataOnDemand;
import com.hpe.ao.reference.Status;
import com.hpe.ao.service.ProjectReleaseService;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProjectReleaseDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProjectReleaseDataOnDemand: @Component;
    
    private Random ProjectReleaseDataOnDemand.rnd = new SecureRandom();
    
    private List<ProjectRelease> ProjectReleaseDataOnDemand.data;
    
    @Autowired
    ProjectDataOnDemand ProjectReleaseDataOnDemand.projectDataOnDemand;
    
    @Autowired
    ProjectReleaseService ProjectReleaseDataOnDemand.projectReleaseService;
    
    public ProjectRelease ProjectReleaseDataOnDemand.getNewTransientProjectRelease(int index) {
        ProjectRelease obj = new ProjectRelease();
        setDescription(obj, index);
        setDurationIMPActual(obj, index);
        setDurationIMPBaseline(obj, index);
        setDurationSITActual(obj, index);
        setDurationSITBaseline(obj, index);
        setDurationUATActual(obj, index);
        setDurationUATBaseline(obj, index);
        setEndDateActual(obj, index);
        setEndDateBaseline(obj, index);
        setGoLiveDateActual(obj, index);
        setGoLiveDateBaseline(obj, index);
        setLeadName(obj, index);
        setName(obj, index);
        setProject(obj, index);
        setStartDateActual(obj, index);
        setStartDateBaseline(obj, index);
        setStatus(obj, index);
        return obj;
    }
    
    public void ProjectReleaseDataOnDemand.setDescription(ProjectRelease obj, int index) {
        String description = "description_" + index;
        if (description.length() > 250) {
            description = description.substring(0, 250);
        }
        obj.setDescription(description);
    }
    
    public void ProjectReleaseDataOnDemand.setDurationIMPActual(ProjectRelease obj, int index) {
        BigDecimal durationIMPActual = BigDecimal.valueOf(index);
        obj.setDurationIMPActual(durationIMPActual);
    }
    
    public void ProjectReleaseDataOnDemand.setDurationIMPBaseline(ProjectRelease obj, int index) {
        BigDecimal durationIMPBaseline = BigDecimal.valueOf(index);
        obj.setDurationIMPBaseline(durationIMPBaseline);
    }
    
    public void ProjectReleaseDataOnDemand.setDurationSITActual(ProjectRelease obj, int index) {
        BigDecimal durationSITActual = BigDecimal.valueOf(index);
        obj.setDurationSITActual(durationSITActual);
    }
    
    public void ProjectReleaseDataOnDemand.setDurationSITBaseline(ProjectRelease obj, int index) {
        BigDecimal durationSITBaseline = BigDecimal.valueOf(index);
        obj.setDurationSITBaseline(durationSITBaseline);
    }
    
    public void ProjectReleaseDataOnDemand.setDurationUATActual(ProjectRelease obj, int index) {
        BigDecimal durationUATActual = BigDecimal.valueOf(index);
        obj.setDurationUATActual(durationUATActual);
    }
    
    public void ProjectReleaseDataOnDemand.setDurationUATBaseline(ProjectRelease obj, int index) {
        BigDecimal durationUATBaseline = BigDecimal.valueOf(index);
        obj.setDurationUATBaseline(durationUATBaseline);
    }
    
    public void ProjectReleaseDataOnDemand.setEndDateActual(ProjectRelease obj, int index) {
        Date endDateActual = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setEndDateActual(endDateActual);
    }
    
    public void ProjectReleaseDataOnDemand.setEndDateBaseline(ProjectRelease obj, int index) {
        Date endDateBaseline = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setEndDateBaseline(endDateBaseline);
    }
    
    public void ProjectReleaseDataOnDemand.setGoLiveDateActual(ProjectRelease obj, int index) {
        Date goLiveDateActual = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setGoLiveDateActual(goLiveDateActual);
    }
    
    public void ProjectReleaseDataOnDemand.setGoLiveDateBaseline(ProjectRelease obj, int index) {
        Date goLiveDateBaseline = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setGoLiveDateBaseline(goLiveDateBaseline);
    }
    
    public void ProjectReleaseDataOnDemand.setLeadName(ProjectRelease obj, int index) {
        String leadName = "leadName_" + index;
        if (leadName.length() > 30) {
            leadName = leadName.substring(0, 30);
        }
        obj.setLeadName(leadName);
    }
    
    public void ProjectReleaseDataOnDemand.setName(ProjectRelease obj, int index) {
        String name = "name_" + index;
        if (name.length() > 30) {
            name = name.substring(0, 30);
        }
        obj.setName(name);
    }
    
    public void ProjectReleaseDataOnDemand.setProject(ProjectRelease obj, int index) {
        Project project = projectDataOnDemand.getRandomProject();
        obj.setProject(project);
    }
    
    public void ProjectReleaseDataOnDemand.setStartDateActual(ProjectRelease obj, int index) {
        Date startDateActual = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStartDateActual(startDateActual);
    }
    
    public void ProjectReleaseDataOnDemand.setStartDateBaseline(ProjectRelease obj, int index) {
        Date startDateBaseline = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStartDateBaseline(startDateBaseline);
    }
    
    public void ProjectReleaseDataOnDemand.setStatus(ProjectRelease obj, int index) {
        Status status = Status.class.getEnumConstants()[0];
        obj.setStatus(status);
    }
    
    public ProjectRelease ProjectReleaseDataOnDemand.getSpecificProjectRelease(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ProjectRelease obj = data.get(index);
        Long id = obj.getId();
        return projectReleaseService.findProjectRelease(id);
    }
    
    public ProjectRelease ProjectReleaseDataOnDemand.getRandomProjectRelease() {
        init();
        ProjectRelease obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return projectReleaseService.findProjectRelease(id);
    }
    
    public boolean ProjectReleaseDataOnDemand.modifyProjectRelease(ProjectRelease obj) {
        return false;
    }
    
    public void ProjectReleaseDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = projectReleaseService.findProjectReleaseEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ProjectRelease' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ProjectRelease>();
        for (int i = 0; i < 10; i++) {
            ProjectRelease obj = getNewTransientProjectRelease(i);
            try {
                projectReleaseService.saveProjectRelease(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
