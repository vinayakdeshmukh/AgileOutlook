// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.hpe.ao.domain.transaction;

import com.hpe.ao.domain.transaction.CapacityEntry;
import com.hpe.ao.domain.transaction.CapacityEntryDataOnDemand;
import com.hpe.ao.domain.transaction.Project;
import com.hpe.ao.domain.transaction.ProjectDataOnDemand;
import com.hpe.ao.reference.CapacityEntryType;
import com.hpe.ao.service.CapacityEntryService;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CapacityEntryDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CapacityEntryDataOnDemand: @Component;
    
    private Random CapacityEntryDataOnDemand.rnd = new SecureRandom();
    
    private List<CapacityEntry> CapacityEntryDataOnDemand.data;
    
    @Autowired
    ProjectDataOnDemand CapacityEntryDataOnDemand.projectDataOnDemand;
    
    @Autowired
    CapacityEntryService CapacityEntryDataOnDemand.capacityEntryService;
    
    public CapacityEntry CapacityEntryDataOnDemand.getNewTransientCapacityEntry(int index) {
        CapacityEntry obj = new CapacityEntry();
        setCapacityEntryType(obj, index);
        setEndDate(obj, index);
        setEntryComments(obj, index);
        setFactor1(obj, index);
        setFactor1Description(obj, index);
        setFactor2(obj, index);
        setFactor2Description(obj, index);
        setFactor3(obj, index);
        setFactor3Description(obj, index);
        setPointCapacity(obj, index);
        setProject(obj, index);
        setStartDate(obj, index);
        setTeamAvailability(obj, index);
        setTeamAveragePointDaily(obj, index);
        setTeamCount(obj, index);
        setTeamSize(obj, index);
        return obj;
    }
    
    public void CapacityEntryDataOnDemand.setCapacityEntryType(CapacityEntry obj, int index) {
        CapacityEntryType capacityEntryType = CapacityEntryType.class.getEnumConstants()[0];
        obj.setCapacityEntryType(capacityEntryType);
    }
    
    public void CapacityEntryDataOnDemand.setEndDate(CapacityEntry obj, int index) {
        Date endDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setEndDate(endDate);
    }
    
    public void CapacityEntryDataOnDemand.setEntryComments(CapacityEntry obj, int index) {
        String entryComments = "entryComments_" + index;
        if (entryComments.length() > 250) {
            entryComments = entryComments.substring(0, 250);
        }
        obj.setEntryComments(entryComments);
    }
    
    public void CapacityEntryDataOnDemand.setFactor1(CapacityEntry obj, int index) {
        BigDecimal factor1 = BigDecimal.valueOf(index);
        obj.setFactor1(factor1);
    }
    
    public void CapacityEntryDataOnDemand.setFactor1Description(CapacityEntry obj, int index) {
        String factor1Description = "factor1Description_" + index;
        obj.setFactor1Description(factor1Description);
    }
    
    public void CapacityEntryDataOnDemand.setFactor2(CapacityEntry obj, int index) {
        BigDecimal factor2 = BigDecimal.valueOf(index);
        obj.setFactor2(factor2);
    }
    
    public void CapacityEntryDataOnDemand.setFactor2Description(CapacityEntry obj, int index) {
        String factor2Description = "factor2Description_" + index;
        obj.setFactor2Description(factor2Description);
    }
    
    public void CapacityEntryDataOnDemand.setFactor3(CapacityEntry obj, int index) {
        BigDecimal factor3 = BigDecimal.valueOf(index);
        obj.setFactor3(factor3);
    }
    
    public void CapacityEntryDataOnDemand.setFactor3Description(CapacityEntry obj, int index) {
        String factor3Description = "factor3Description_" + index;
        obj.setFactor3Description(factor3Description);
    }
    
    public void CapacityEntryDataOnDemand.setPointCapacity(CapacityEntry obj, int index) {
        BigDecimal pointCapacity = BigDecimal.valueOf(index);
        obj.setPointCapacity(pointCapacity);
    }
    
    public void CapacityEntryDataOnDemand.setProject(CapacityEntry obj, int index) {
        Project project = projectDataOnDemand.getRandomProject();
        obj.setProject(project);
    }
    
    public void CapacityEntryDataOnDemand.setStartDate(CapacityEntry obj, int index) {
        Date startDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStartDate(startDate);
    }
    
    public void CapacityEntryDataOnDemand.setTeamAvailability(CapacityEntry obj, int index) {
        BigDecimal teamAvailability = BigDecimal.valueOf(index);
        obj.setTeamAvailability(teamAvailability);
    }
    
    public void CapacityEntryDataOnDemand.setTeamAveragePointDaily(CapacityEntry obj, int index) {
        BigDecimal teamAveragePointDaily = BigDecimal.valueOf(index);
        obj.setTeamAveragePointDaily(teamAveragePointDaily);
    }
    
    public void CapacityEntryDataOnDemand.setTeamCount(CapacityEntry obj, int index) {
        BigDecimal teamCount = BigDecimal.valueOf(index);
        obj.setTeamCount(teamCount);
    }
    
    public void CapacityEntryDataOnDemand.setTeamSize(CapacityEntry obj, int index) {
        BigDecimal teamSize = BigDecimal.valueOf(index);
        obj.setTeamSize(teamSize);
    }
    
    public CapacityEntry CapacityEntryDataOnDemand.getSpecificCapacityEntry(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        CapacityEntry obj = data.get(index);
        Long id = obj.getId();
        return capacityEntryService.findCapacityEntry(id);
    }
    
    public CapacityEntry CapacityEntryDataOnDemand.getRandomCapacityEntry() {
        init();
        CapacityEntry obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return capacityEntryService.findCapacityEntry(id);
    }
    
    public boolean CapacityEntryDataOnDemand.modifyCapacityEntry(CapacityEntry obj) {
        return false;
    }
    
    public void CapacityEntryDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = capacityEntryService.findCapacityEntryEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'CapacityEntry' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<CapacityEntry>();
        for (int i = 0; i < 10; i++) {
            CapacityEntry obj = getNewTransientCapacityEntry(i);
            try {
                capacityEntryService.saveCapacityEntry(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
