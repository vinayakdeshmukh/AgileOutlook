// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.hpe.ao.domain.transaction;

import com.hpe.ao.domain.transaction.Feature;
import com.hpe.ao.domain.transaction.FeatureDataOnDemand;
import com.hpe.ao.domain.transaction.ProgressEntry;
import com.hpe.ao.domain.transaction.ProgressEntryDataOnDemand;
import com.hpe.ao.domain.transaction.Project;
import com.hpe.ao.domain.transaction.ProjectDataOnDemand;
import com.hpe.ao.service.ProgressEntryService;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProgressEntryDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProgressEntryDataOnDemand: @Component;
    
    private Random ProgressEntryDataOnDemand.rnd = new SecureRandom();
    
    private List<ProgressEntry> ProgressEntryDataOnDemand.data;
    
    @Autowired
    FeatureDataOnDemand ProgressEntryDataOnDemand.featureDataOnDemand;
    
    @Autowired
    ProjectDataOnDemand ProgressEntryDataOnDemand.projectDataOnDemand;
    
    @Autowired
    ProgressEntryService ProgressEntryDataOnDemand.progressEntryService;
    
    public ProgressEntry ProgressEntryDataOnDemand.getNewTransientProgressEntry(int index) {
        ProgressEntry obj = new ProgressEntry();
        setEffectiveDate(obj, index);
        setEntryComments(obj, index);
        setFeature(obj, index);
        setProject(obj, index);
        setStoryCountComplete(obj, index);
        setStoryPointComplete(obj, index);
        return obj;
    }
    
    public void ProgressEntryDataOnDemand.setEffectiveDate(ProgressEntry obj, int index) {
        Date effectiveDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setEffectiveDate(effectiveDate);
    }
    
    public void ProgressEntryDataOnDemand.setEntryComments(ProgressEntry obj, int index) {
        String entryComments = "entryComments_" + index;
        if (entryComments.length() > 250) {
            entryComments = entryComments.substring(0, 250);
        }
        obj.setEntryComments(entryComments);
    }
    
    public void ProgressEntryDataOnDemand.setFeature(ProgressEntry obj, int index) {
        Feature feature = featureDataOnDemand.getRandomFeature();
        obj.setFeature(feature);
    }
    
    public void ProgressEntryDataOnDemand.setProject(ProgressEntry obj, int index) {
        Project project = projectDataOnDemand.getRandomProject();
        obj.setProject(project);
    }
    
    public void ProgressEntryDataOnDemand.setStoryCountComplete(ProgressEntry obj, int index) {
        BigDecimal storyCountComplete = BigDecimal.valueOf(index);
        obj.setStoryCountComplete(storyCountComplete);
    }
    
    public void ProgressEntryDataOnDemand.setStoryPointComplete(ProgressEntry obj, int index) {
        BigDecimal storyPointComplete = BigDecimal.valueOf(index);
        obj.setStoryPointComplete(storyPointComplete);
    }
    
    public ProgressEntry ProgressEntryDataOnDemand.getSpecificProgressEntry(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ProgressEntry obj = data.get(index);
        Long id = obj.getId();
        return progressEntryService.findProgressEntry(id);
    }
    
    public ProgressEntry ProgressEntryDataOnDemand.getRandomProgressEntry() {
        init();
        ProgressEntry obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return progressEntryService.findProgressEntry(id);
    }
    
    public boolean ProgressEntryDataOnDemand.modifyProgressEntry(ProgressEntry obj) {
        return false;
    }
    
    public void ProgressEntryDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = progressEntryService.findProgressEntryEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ProgressEntry' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ProgressEntry>();
        for (int i = 0; i < 10; i++) {
            ProgressEntry obj = getNewTransientProgressEntry(i);
            try {
                progressEntryService.saveProgressEntry(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
