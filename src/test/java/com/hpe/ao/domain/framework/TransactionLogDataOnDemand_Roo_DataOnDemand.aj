// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.hpe.ao.domain.framework;

import com.hpe.ao.domain.framework.TransactionLog;
import com.hpe.ao.domain.framework.TransactionLogDataOnDemand;
import com.hpe.ao.reference.LogType;
import com.hpe.ao.service.TransactionLogService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TransactionLogDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TransactionLogDataOnDemand: @Component;
    
    private Random TransactionLogDataOnDemand.rnd = new SecureRandom();
    
    private List<TransactionLog> TransactionLogDataOnDemand.data;
    
    @Autowired
    TransactionLogService TransactionLogDataOnDemand.transactionLogService;
    
    public TransactionLog TransactionLogDataOnDemand.getNewTransientTransactionLog(int index) {
        TransactionLog obj = new TransactionLog();
        setEntityKey2(obj, index);
        setEntityName(obj, index);
        setEntiyKey1(obj, index);
        setLogData(obj, index);
        setLogTimestamp(obj, index);
        setLogType(obj, index);
        setLogUser(obj, index);
        return obj;
    }
    
    public void TransactionLogDataOnDemand.setEntityKey2(TransactionLog obj, int index) {
        Long entityKey2 = new Integer(index).longValue();
        obj.setEntityKey2(entityKey2);
    }
    
    public void TransactionLogDataOnDemand.setEntityName(TransactionLog obj, int index) {
        String entityName = "entityName_" + index;
        if (entityName.length() > 30) {
            entityName = entityName.substring(0, 30);
        }
        obj.setEntityName(entityName);
    }
    
    public void TransactionLogDataOnDemand.setEntiyKey1(TransactionLog obj, int index) {
        Long entiyKey1 = new Integer(index).longValue();
        obj.setEntiyKey1(entiyKey1);
    }
    
    public void TransactionLogDataOnDemand.setLogData(TransactionLog obj, int index) {
        String logData = "logData_" + index;
        if (logData.length() > 1000) {
            logData = logData.substring(0, 1000);
        }
        obj.setLogData(logData);
    }
    
    public void TransactionLogDataOnDemand.setLogTimestamp(TransactionLog obj, int index) {
        Date logTimestamp = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLogTimestamp(logTimestamp);
    }
    
    public void TransactionLogDataOnDemand.setLogType(TransactionLog obj, int index) {
        LogType logType = LogType.class.getEnumConstants()[0];
        obj.setLogType(logType);
    }
    
    public void TransactionLogDataOnDemand.setLogUser(TransactionLog obj, int index) {
        String logUser = "logUser_" + index;
        if (logUser.length() > 30) {
            logUser = logUser.substring(0, 30);
        }
        obj.setLogUser(logUser);
    }
    
    public TransactionLog TransactionLogDataOnDemand.getSpecificTransactionLog(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        TransactionLog obj = data.get(index);
        Long id = obj.getId();
        return transactionLogService.findTransactionLog(id);
    }
    
    public TransactionLog TransactionLogDataOnDemand.getRandomTransactionLog() {
        init();
        TransactionLog obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return transactionLogService.findTransactionLog(id);
    }
    
    public boolean TransactionLogDataOnDemand.modifyTransactionLog(TransactionLog obj) {
        return false;
    }
    
    public void TransactionLogDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = transactionLogService.findTransactionLogEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'TransactionLog' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<TransactionLog>();
        for (int i = 0; i < 10; i++) {
            TransactionLog obj = getNewTransientTransactionLog(i);
            try {
                transactionLogService.saveTransactionLog(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
